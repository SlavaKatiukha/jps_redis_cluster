_info : 'https://docs.cloudscripting.com/6.1.2/'
version: 6.1.2
type: update
name: 'Redis Cluster'
id: 'redis_cluster'
homepage: https://github.com/layershift/jps_redis_cluster
baseUrl: https://raw.githubusercontent.com/layershift/jps_redis_cluster/1-node-group
logo: /images/redis.jpg
targetNodes:
  targetNodes: 
  nodeGroup: 'redis_nodes'

globals:
  pass: ${fn.password}
  message: ""

#This doesn't work properly yet, still improving
menu :
- confirmText: check redis status
  caption: check redis status
  action: status
- caption: Allow Uninstall
  action: allow_uninstall

onInstall:
  - cmd [redis_nodes]:
    - touch /etc/redis/add-onUninstallLock
# cleanup any previous cluster files
  - uninstall:
#Open firewall ports from 7000-7005 and 17000-17005
#These ports are only opened for the internal IP of the nodes
  - set-firewall
  - set-firewall-cluster
#Create configuration files for redis cluster
  - cmd [redis_nodes]:
    - touch /etc/redis/ips.txt
    - chown jelastic /etc/redis/ips.txt
    user: root
  - cmd [redis_nodes]:
    - touch /etc/redis/redis_cluster.conf
    - chown jelastic /etc/redis/redis_cluster.conf
    user: root
#Create unique paswword on all 6 redis nodes
  - set_configuration :
  - api [redis_nodes]: environment.control.RestartNodes
#Add confifuration to the files
  - set_port :
  - set_port1 :
  - set_port2 :
  - set_port3 :
  - set_port4 :
  - set_port5 :
  - config2 :
  - config3 :
  - config4 :
  - config5 :
  - config6 :
  - config_cluster:
      message: ${nodes.redis_nodes[0].address}:${settings.fm} ${nodes.redis_nodes[1].address}:${settings.sm} ${nodes.redis_nodes[2].address}:${settings.tm} ${nodes.redis_nodes[3].address}:${settings.fs} ${nodes.redis_nodes[4].address}:${settings.ss} ${nodes.redis_nodes[5].address}:${settings.ts}
  - config_cluster:
      message: --cluster-replicas 1
  - api [redis_nodes]: environment.control.RestartNodes
#Start redis cluster with the configuration file
  - start_redis_cluster:
  - message: "Conenct to the following nodes:\n ${nodes.redis_nodes[0].address}:${settings.fm} ${nodes.redis_nodes[1].address}:${settings.sm} ${nodes.redis_nodes[2].address}:${settings.tm} ${nodes.redis_nodes[3].address}:${settings.fs} ${nodes.redis_nodes[4].address}:${settings.ss} ${nodes.redis_nodes[5].address}:${settings.ts}\n using password: ${globals.pass}"
    script: |
      return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}

onUninstall:
  - cmd [redis_nodes]: 
    - if [ -f /etc/redis/add-onUninstallLock ]; then echo -e "Issue:\nUninstall lock in place!"; exit 0; fi;
  - appendMessage: ${response.out}
  - if (response.out.indexOf("Issue") !== -1):
    message:  ${response.out}
    script: |
      return {result: 'fail', 'message': message.replace(/\n/g, '  \n')}
  - if (response.out.indexOf("Issue") == -1):
    uninstall:


settings:
#The port settings are hidden from the customer and are used for the correct configuration
  fields:
  - caption: First master Port Number
    type: spinner
    name: fm
    increment: 1
    default: 7000
    min: 1
    hidden: true
  - caption: second master Port Number
    type: spinner
    name: sm
    increment: 1
    default: 7001
    min: 1
    hidden: true
  - caption: third master Port Number
    type: spinner
    name: tm
    increment: 1
    default: 7002
    min: 1
    hidden: true
  - caption: First slave Port Number
    type: spinner
    name: fs
    increment: 1
    default: 7003
    min: 1
    hidden: true
  - caption: second slave Port Number
    type: spinner
    name: ss
    increment: 1
    default: 7004
    min: 1
    hidden: true
  - caption: third slave Port Number
    type: spinner
    name: ts
    increment: 1
    default: 7005
    min: 1  
    hidden: true
    
actions:
  appendMessage:
    setGlobals:
      message: ${globals.message}${this}

  set_port :
    - nodeId: ${nodes.redis_nodes[0].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.fm}
  set_port1 :
    - nodeId: ${nodes.redis_nodes[1].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.sm}
  set_port2 :
    - nodeId: ${nodes.redis_nodes[2].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.tm}
  set_port3 :
    - nodeId: ${nodes.redis_nodes[3].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.fs}
  
  set_port4 :
    - nodeId: ${nodes.redis_nodes[4].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.ss}

  set_port5 :
    - nodeId: ${nodes.redis_nodes[5].id}
      appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: port ${settings.ts}

  config2:
    appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: cluster-enabled yes
  config3:
    appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: cluster-config-file nodes.conf
  config4:
    appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: cluster-node-timeout 5000
  config5:
    appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: protected-mode no
  config6:
    appendFile [redis_nodes]:
      path: /etc/redis/redis_cluster.conf
      body: appendonly yes  
  config_cluster:
    appendFile [redis_nodes]:
      path: /etc/redis/ips.txt
      body: ${this.message}
  start_redis_server:
    cmd [redis_nodes] :
      screen -dm /usr/bin/redis-server /etc/redis/redis_cluster.conf
  start_redis_cluster:
    nodeId: ${nodes.redis_nodes[0].id}
    cmd : 
      /bin/echo "yes" | /usr/bin/redis-cli --cluster create `cat /etc/redis/ips.txt` -a ${globals.pass}
  set_configuration:
    cmd [redis_nodes] :
      - /bin/sed -i 's/requirepass/#requirepass/g' /etc/redis.conf
      - /bin/echo "requirepass ${globals.pass}" >> /etc/redis.conf
      - /bin/echo "masterauth ${globals.pass}" >> /etc/redis/redis_cluster.conf
      - /bin/echo "include /etc/redis/redis_cluster.conf" >> /etc/redis.conf
      - sleep 5
    user: root
  uninstall:
    - cmd [redis_nodes] :
        - jem service stop || true
        - rm -f /etc/redis/ips.txt
        - echo "" > /etc/redis/redis_cluster.conf
        - rm -f /var/lib/redis/nodes.conf
        - rm -f /var/lib/redis/appendonly.aof
        - rm -f /var/lib/redis/dump.rdb
        - jem service start || true
      user: root
    - api [redis_nodes]: environment.control.restartservices
    - script: |
        var resp = api.env.security.GetRules("${env.name}", session);
        var rules = resp.rules;
        for (var i = 0, n = rules.length; i < n; i++) {
          if (rules[i].name == "Redis Server" || rules[i].name == "Redis Cluster") {
            var deleted = api.env.security.RemoveRule("${env.name}", session, rules[i].id);
            api.marketplace.console.WriteLog("Deleted: " + rules[i].id + " " + deleted);
          }
        }
        return { 'result': 0 };

  set-firewall :
    api[redis_nodes]:
      - method: environment.security.addrule
        params:
        rule: {
          action: "ALLOW",
          direction: "INPUT",
          name: "Redis server",
          src: "${nodes.redis_nodes[0].address},${nodes.redis_nodes[1].address},${nodes.redis_nodes[2].address},${nodes.redis_nodes[3].address},${nodes.redis_nodes[4].address},${nodes.redis_nodes[5].address}",
          ports: "7000-7005"
          }
  set-firewall-cluster :
      api[redis_nodes]:
        - method: environment.security.addrule
          params:
            rule: {
              action: "ALLOW",
              direction: "INPUT",
              name: "Redis Cluster",
              src: "${nodes.redis_nodes[0].address},${nodes.redis_nodes[1].address},${nodes.redis_nodes[2].address},${nodes.redis_nodes[3].address},${nodes.redis_nodes[4].address},${nodes.redis_nodes[5].address}",
              ports: "17000-17005"
              }
  allow_uninstall:
    cmd[redis_nodes]:
      - rm -f /etc/redis/add-onUninstallLock
    user: root