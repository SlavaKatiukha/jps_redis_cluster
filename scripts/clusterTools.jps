_info : 'https://docs.cloudscripting.com/6.1.2/'
version: 6.1.2
type: update
name: 'Redis Cluster Tools'
id: 'redis_cluster_tools'
homepage: https://github.com/layershift/jps_redis_cluster
baseUrl: https://raw.githubusercontent.com/layershift/jps_redis_cluster/main
logo: /images/Redis_cluster.png?_r=${fn.random}
description:
  short: Redis Cluster Tools.

targetNodes:
  nodeGroup: 'redis_nodes'

globals:
  pass: "${settings.redisClusterPassword}"

menu :
- confirmText: Execute "cluster nodes"?
  caption: Show Cluster Nodes
  action: showClusterNodes

- caption: Show connection information
  action: showConnectionInformation

- caption: Ping cluster nodes?
  action: pingClusterNodes

buttons:
- caption: p3x-redis-ui
  action: generateURL

settings:
    fields:
    - name: redisClusterPassword
      caption: Cluster Password
      type: string
      value: 

    - caption: First master Port Number
      type: spinner
      name: fm
      increment: 1
      default: 7000
      min: 1
      hidden: true
    - caption: second master Port Number
      type: spinner
      name: sm
      increment: 1
      default: 7001
      min: 1
      hidden: true
    - caption: third master Port Number
      type: spinner
      name: tm
      increment: 1
      default: 7002
      min: 1
      hidden: true
    - caption: First slave Port Number
      type: spinner
      name: fs
      increment: 1
      default: 7003
      min: 1
      hidden: true
    - caption: second slave Port Number
      type: spinner
      name: ss
      increment: 1
      default: 7004
      min: 1
      hidden: true
    - caption: third slave Port Number
      type: spinner
      name: ts
      increment: 1
      default: 7005
      min: 1  
      hidden: true

onUninstall:
  uninstall_nginx_interface

onInstall:
  - install_nginx_interface
  - generateURL

actions:
  showConnectionInformation :
    - message: "Conenct to the following nodes:\n ${nodes.redis_nodes[0].address}:${settings.fm} ${nodes.redis_nodes[1].address}:${settings.sm} ${nodes.redis_nodes[2].address}:${settings.tm} ${nodes.redis_nodes[3].address}:${settings.fs} ${nodes.redis_nodes[4].address}:${settings.ss} ${nodes.redis_nodes[5].address}:${settings.ts}\n using password: ${globals.pass}"
      script: |
        return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}

  showClusterNodes :
    - cmd[${nodes.redis_nodes[0].id}]:
        - redis-cli -p ${settings.fm} -a ${globals.pass} cluster nodes 2>/dev/null | awk '{printf "%25-s %s\n" ,$2,$3}'
      user: root
    - message: ${response.out}
      script: |
        return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}
  
  pingClusterNodes :
    - cmd[${nodes.redis_nodes[0].id}]:
        - for node in $(redis-cli -p 7000 -a ${globals.pass} cluster nodes 2>/dev/null | awk '{print $2}' | awk -F "@" '{print $1}'); do redis-cli $(echo $node| awk -F":" '{print "-h "$1" -p "$2}') -a ${globals.pass} ping 2>/dev/null | awk '{print "'$node' "$0}'; done | awk '{printf "%-20s %s\n",$1,$2}'
      user: root
    - message: ${response.out}
      script: |
        return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}
  
  uninstall_nginx_interface:
    - cmd [${nodes.redis_nodes[0].id}]:
          - systemctl disable --now nginx p3x-redis-ui
          - npm uninstall p3x-redis-ui -g
          - yum remove nginx nodejs httpd-tools -y
          - userdel -f p3x-redis-ui
      user: root

  install_nginx_interface:
    - cmd [${nodes.redis_nodes[0].id}]: 
            - curl -sL https://rpm.nodesource.com/setup_16.x | sudo bash -
            - yum clean all
            - rm -rf /var/cache/yum/*
            - yum install epel-release -y
            - yum install nginx nodejs httpd-tools -y
            - systemctl enable --now nginx
            - npm install p3x-redis-ui -g
            #Configure p3x-redis-ui  as described https://github.com/patrikx3/redis-ui/blob/HEAD/artifacts/readme/start-up-server.md
            - useradd -s /sbin/nologin p3x-redis-ui
            - if [ -f /etc/systemd/system/p3x-redis-ui.service ]; then rm -rf /etc/systemd/system/p3x-redis-ui.service; fi
            - echo "[Unit]" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "Description=p3x-redis" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "After=network.target" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "[Service]" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "Type=simple" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "User=p3x-redis-ui" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "WorkingDirectory=/home/p3x-redis-ui" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "# or if you want readonly connections as it is public" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "#ExecStart=/usr/bin/p3x-redis --readonly-connections" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "#ExecStart=/usr/bin/p3x-redis --readonly-connections --config /home/p3x-redis-ui/p3xrs.json" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "ExecStart=/usr/bin/p3x-redis" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "Restart=on-abort" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "[Install]" >> /etc/systemd/system/p3x-redis-ui.service
            - echo "WantedBy=multi-user.target" >> /etc/systemd/system/p3x-redis-ui.service
            - systemctl daemon-reload
            - systemctl enable p3x-redis-ui
            - service p3x-redis-ui start
            #configure nginx to redirect to p3x-redis-ui localhost 7843 as described https://github.com/patrikx3/redis-ui/blob/HEAD/artifacts/readme/start-up-server.md
            - if [ -f /etc/nginx/default.d/p3x-redis-ui.conf ]; then rm -rf /etc/nginx/default.d/p3x-redis-ui.conf; fi
            - echo "location / {" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "proxy_pass \"http://127.0.0.1:7843\";" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "proxy_set_header X-Forwarded-For \$remote_addr;" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "proxy_set_header Host \$host;" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "proxy_set_header Upgrade \$http_upgrade;" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "proxy_set_header Connection "upgrade";" >> /etc/nginx/default.d/p3x-redis-ui.conf
            - /bin/echo "}" >> /etc/nginx/default.d/p3x-redis-ui.conf
            #password protect nginx  described https://ubiq.co/tech-blog/how-to-password-protect-directory-in-nginx/
            - if [ -f /etc/nginx/conf.d/.htpasswd ]; then rm -rf /etc/nginx/conf.d/.htpasswd; fi 
            - /bin/htpasswd -b -c /etc/nginx/conf.d/.htpasswd developer ${globals.pass}
            - if [ -f /etc/nginx/default.d/nginx_passwd.conf ]; then rm -rf /etc/nginx/default.d/nginx_passwd.conf; fi 
            - /bin/echo "auth_basic \"Restricted Access!\";" >> /etc/nginx/default.d/nginx_passwd.conf
            - /bin/echo "auth_basic_user_file /etc/nginx/conf.d/.htpasswd;" >> /etc/nginx/default.d/nginx_passwd.conf
            - systemctl restart nginx
            #- /bin/echo "${globals.pass}" >> /tmp/pass
      user: root

  generateURL:
    - message: "[P3X Redis UI](https://developer:${globals.pass}@node${nodes.redis_nodes[0].id}-${env.domain}/) \n Access details:\n\n User: developer\nPassword: ${globals.pass}"
      script: |
        return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}          
